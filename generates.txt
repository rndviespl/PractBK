public void UpdateWorkersNames(int numUpdates)
        {
            List<string> surnames = [ "Краснова", "Зубова", "Сахарова", "Панкратова", "Абрамова", "Лыкова", "Михайлова", "Румянцева", "Игнатова", "Литвинова", "Васильева", "Кузьмин", "Владимирова", "Александрова", "Латышева", "Борисова", "Кузьмина", "Терехов", "Краснова", "Петров", "Гришин", "Филиппов", "Макеев", "Казакова",
                "Лебедева", "Горелова", "Юдин", "Казаков", "Петрова", "Козлова", "Белова", "Белов", "Горлов", "Сергеева", "Воробьев", "Глушкова", "Олейников", "Федотов", "Архипова", "Морозов", "Крылов", "Павлов", "Максимова", "Гусева", "Васильева", "Быков", "Куликов", "Козлов", "Родионов", "Кулешова", "Захаров", "Панфилова", "Масленникова",
                "Овсянникова", "Соловьева", "Баранов", "Комаров", "Осипов", "Никифорова", "Павлова", "Тарасова", "Скворцова", "Моисеев", "Павлов", "Никифоров", "Пономарева", "Михайлова", "Иванова", "Кузнецов", "Соловьева", "Борисов", "Гончарова", "Филатов", "Богданова", "Мухина", "Овсянников", "Сизов", "Капустин", "Левина", "Котова", "Герасимова", "Овсянников", "Тарасова", "Сазонова" ];


            List<string> names = [ "Александра", "Елизавета", "Вероника", "Милана", "Марьям", "Ульяна", "Мария", "Камилла", "Арина", "Элина", "Есения", "Кирилл", "Фатима", "Дарья", "Ясмина", "Юлия", "Алиса", "Денис", "Маргарита", "Дмитрий", "Роман", "Алексей", "Илья", "Вероника", "Лилия", "Майя", "Григорий", "Станислав",
                "Диана", "Максим", "Александра", "Демид", "Георгий", "Эвелина", "Николай", "Валерия", "Александр", "Давид", "Анна", "Марк", "Леонид", "Михаил", "Амалия", "Татьяна", "Ксения", "Марк", "Егор", "Александр", "Виктор", "Константин", "Милана", "Варвара", "Мария", "Ольга", "Максим", "Владимир", "Виктор", "Софья", "Виктория", "Мария",
                "Анастасия", "Максим", "Тигран", "Даниил", "Станислава", "Анастасия", "Каролина", "Артём", "Сафия", "Егор", "Стефания", "Роман", "Диана", "Амина", "Максим", "Сергей", "Даниил", "Стоислава", "Мир", "Максим", "Дмитрий", "Мадина", "Александ..." ];

            List<string> patronymics = [ "Данииловна", "Андреевна", "Никитична", "Михайловна", "Александровна", "Всеволодовна", "Эминовна", "Александровна", "Артёмовна", "Михайловна", "Демидовна", "Юрьевич", "Макаровна", "Матвеевна", "Матвеевна", "Фёдоровна", "Сергеевна", "Захарович", "Родионовна", "Александрович", "Ильич",
                "Романович", "Макарович", "Микайловна", "Николаевна", "Олеговна", "Степанович", "Максимович", "Дмитриевна", "Евгеньевич", "Владиславовна", "Даниилович", "Иванович", "Алиевна", "Денисович", "Яновна", "Егорович", "Михайлович", "Фёдоровна", "Артёмовна", "Матвеевна", "Тимуровна", "Михаиловна", "Станиславовна", "Артёмович", "Серафимовна",
                "Ярославович", "Викторовна", "Миронович", "Алиевна", "Юрьевна", "Георгиевич", "Иванович", "Андреевич", "Григорьевна", "Александровна", "Владиславовна", "Михайловна", "Робертович", "Дмитриевич", "Александро..." ];


            List<string> maleSurnames = surnames.Where(s => !s.EndsWith("а")).ToList();
            List<string> femaleSurnames = surnames.Where(s => s.EndsWith("а")).ToList();

            List<string> maleNames = names.Take(maleSurnames.Count).ToList();
            List<string> femaleNames = names.Skip(maleSurnames.Count).Take(femaleSurnames.Count).ToList();

            List<string> malePatronymics = patronymics.Where(p => p.EndsWith("ич")).ToList();
            List<string> femalePatronymics = patronymics.Where(p => p.EndsWith("на")).ToList();

            Random random = new Random();

            MySqlConnection connection = new ConnectionDB("localhost", "bk654", "root", "root").Connect();
            using (connection)
            {
                for (int i = 1; i <= numUpdates; i++)
                {
                    string surname;
                    string name;
                    string patronymic;
                    bool isMale = random.Next(0, 2) == 0;

                    if (isMale)
                    {
                        surname = maleSurnames[random.Next(maleSurnames.Count)];
                        name = maleNames[random.Next(maleNames.Count)];
                        patronymic = malePatronymics[random.Next(malePatronymics.Count)];
                    }
                    else
                    {
                        surname = femaleSurnames[random.Next(femaleSurnames.Count)];
                        name = femaleNames[random.Next(femaleNames.Count)];
                        patronymic = femalePatronymics[random.Next(femalePatronymics.Count)];
                    }

                    int workerId = random.Next(1, 4502); // Предположим, что у вас есть 1000 записей работников

                    string query = $"UPDATE bk654.worker SET surname = '{surname}', name = '{name}', patronymic = '{patronymic}' WHERE worker_id = {workerId}";

                    MySqlCommand command = new MySqlCommand(query, connection);
                    command.ExecuteNonQuery();
                }
            }
        }
        public void GenerateRandomWorkers(int numWorkers)
        {
            List<string> surnames = new List<string> { "Иванов", "Петров", "Сидоров", "Козлов", "Смирнов" };
            List<string> names = new List<string> { "Иван", "Пётр", "Алексей", "Андрей", "Сергей" };
            List<string> patronymics = new List<string> { "Иванович", "Петрович", "Алексеевич", "Андреевич", "Сергеевич" };
            List<int> positionIds = new List<int> { 4, 8, 9 }; // Пример значений для айди позиций
            List<int> restaurantIds = Enumerable.Range(1, 100).ToList(); // Диапазон айди ресторанов от 1 до 100
            Random random = new Random();

            MySqlConnection connection = new ConnectionDB("localhost", "bk654", "root", "root").Connect();
            using (connection)
            {
                for (int i = 1; i <= numWorkers; i++)
                {
                    string surname = surnames[random.Next(surnames.Count)];
                    string name = names[random.Next(names.Count)];
                    string patronymic = patronymics[random.Next(patronymics.Count)];
                    DateTime startDate = DateTime.Now.AddDays(-random.Next(1, 365));
                    DateTime? endDate = null;
                    string dismissalReason = "";
                    int positionId = positionIds[random.Next(positionIds.Count)];
                    int restaurantId = restaurantIds[random.Next(restaurantIds.Count)];

                    string query = $"INSERT INTO bk654.worker (position_id, restaurant_id, surname, name, patronymic, start_date, end_date, dismissal_reason) " +
                        $"VALUES ({positionId}, {restaurantId}, '{surname}', '{name}', '{patronymic}', '{startDate.ToString("yyyy-MM-dd HH:mm:ss")}', " +
                        $"{(endDate == null ? "NULL" : $"'{((DateTime)endDate).ToString("yyyy-MM-dd HH:mm:ss")}'")}, '{dismissalReason}')";

                    MySqlCommand command = new MySqlCommand(query, connection);
                    command.ExecuteNonQuery();
                }
            }
        }

        public static void GenerateRandomPosAtWork()
        {
            Random random = new Random();

            List<string> jobTitles = new List<string>
        {
            "Кассир",
            "Сборщик",
            "Повар",
            "Ночник",
            "Менеджер",
            "Доставщик",
            "Технолог",
            "Заместитель директора ресторана",
            "Директор ресторана"
        };

            for (int i = 0; i < 9; i++)
            {
                string randomJobTitle = jobTitles[random.Next(jobTitles.Count)];
                decimal randomSalary = random.Next(250, 601); // Генерация случайной зарплаты между 250 и 600

                Console.WriteLine($"INSERT INTO `bk654`.`position_at_work` (`name`, `salary_per_hour`) VALUES ('{randomJobTitle}', {randomSalary});");
            }
        }

        public void GenerateWorkShiftForEmployeeAllYear()
        {
            Random rnd = new Random();

            var workerIds = dbContext.Workers.Select(w => w.WorkerId).ToList();

            foreach (int workerId in workerIds)
            {
                for (DateTime date = new DateTime(DateTime.Now.Year, 1, 1); date <= DateTime.Now; date = date.AddDays(1))
                {
                   // DayOfWeek randomRestDay = (DayOfWeek)rnd.Next(1, 6); // Выбор случайного дня недели как выходного

                    if (date.DayOfWeek !=   DayOfWeek.Sunday)
                    {
                        int hourStart = rnd.Next(8, 17);
                        int minStart = rnd.Next(0, 60);
                        int shiftDuration = rnd.Next(4, 12);
                        int totalMinutes = hourStart * 60 + minStart + shiftDuration * 60;

                        if (totalMinutes > 1330)
                        {
                            shiftDuration = (1330 - (hourStart * 60 + minStart)) / 60;
                        }

                        int hourEnd = hourStart + shiftDuration;
                        int minEnd = rnd.Next(0, 60);

                        DateTime startShift = new DateTime(date.Year, date.Month, date.Day, hourStart, minStart, 0);
                        DateTime endShift = new DateTime(date.Year, date.Month, date.Day, hourEnd, minEnd, 0);

                        WorkShift1 newWorkShift = new WorkShift1
                        {
                            WorkerId = workerId,
                            StartShift = startShift,
                            EndShift = endShift,
                            DescriptionManualEntry = "Generated Shift"
                        };

                        dbContext.WorkShifts.Add(newWorkShift);
                    }
                }
            }

            dbContext.SaveChanges();
            }


            
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            GenerateRandomWorkers(1000);
            // GenerateWorkShiftForEmployeeAllYear();
        }

        Random random = new Random();
        public void GenerateRandomWorkers(int numWorkers)
        {
            //List<int> restaurantIds = Enumerable.Range(1, 50).ToList();
            //Random random = new Random();


            //for (int i = 1; i <= numWorkers; i++)
            //{
            //    Worker worker = new Worker
            //    {
            //        Surname = GetRandomSurname(random.Next(2) == 0),
            //        Name = GetRandomName(random.Next(2) == 0),
            //        Patronymic = GetRandomPatronymic(),
            //        StartDate = DateTime.Now.AddDays(-random.Next(1, 365)),
            //        EndDate = null,
            //        DismissalReason = "",
            //        PositionId = GetRandomPositionId(),
            //        RestaurantId = GetRandomRestaurantId()
            //    };

            //    dbContext.Workers.Add(worker);
            //    dbContext.SaveChanges();

            // Получаем список всех работников
            List<Worker> workers = dbContext.Workers.ToList();

            // Проходим по списку и меняем фамилию у каждого работника
            foreach (var worker in workers)
            {
                worker.Surname = GetRandomSurname(random.Next(2) == 0); // Изменяем фамилию

                // Обновляем запись работника
                dbContext.Workers.Update(worker);
            }

            // Сохраняем изменения в базе данных
            dbContext.SaveChanges();



        }private string GetRandomSurname(bool isMale)
    {
        List<string> names = isMale ? ["Краснов", "Зубов", "Панкратов", "Абрамов", "Лыков", "Михайлов", "Румянцев", "Игнатов", "Литвинов", "Васильев", "Кузьмин", "Владимиров", "Александров", "Латышев", "Борисов", "Терехов", "Петров",
                        "Гришин", "Филиппов", "Макеев", "Казаков", "Юдин", "Козлов", "Белов", "Горлов", "Воробьев", "Олейников", "Федотов", "Архипов", "Морозов", "Крылов", "Павлов", "Гусев", "Быков", "Куликов", "Родионов", "Захаров", "Баранов",
                        "Комаров", "Осипов", "Павлов", "Моисеев", "Никифоров", "Скворцов", "Павлов", "Никифоров", "Пономарев", "Михайлов", "Иванов", "Кузнецов", "Борисов", "Филатов", "Богданов", "Овсянников", "Сизов", "Капустин", "Котов", "Капустин"]


         : ["Краснова", "Сахарова", "Абрамова", "Лыкова", "Михайлова", "Румянцева", "Игнатова", "Литвинова", "Васильева", "Кузьмина", "Владимирова", "Александрова", "Латышева", "Борисова", "Краснова", "Макеева", "Казакова", "Лебедева",
                         "Горелова", "Казакова", "Петрова", "Козлова", "Белова", "Горлова", "Сергеева", "Глушкова", "Овсянникова", "Соловьева", "Никифорова", "Тарасова", "Скворцова", "Павлова", "Максимова", "Гусева", "Быкова", "Куликова", "Козлова",
                         "Кулешова", "Панфилова", "Масленникова", "Овсянникова", "Соловьева", "Баранова", "Никифорова", "Тарасова", "Сазонова"];
        return names[new Random().Next(names.Count)];
    }
    }

    //private string GetRandomName(bool isMale)
    //{
    //    List<string> names = isMale ? new List<string> { "Иван", "Максим", "Григорий", "Станислав", "Пётр", "Алексей", "Максим", "Тигран", "Даниил", "Демид", "Георгий", "Марьям", "Кирилл", "Денис", "Дмитрий", "Роман", "Алексей", "Илья", }
    //    : new List<string> { "Анна", "Мария", "Екатерина", "Фатима", "Дарья", "Ясмина", "Юлия", "Алиса", "Маргарита", "Вероника", "Лилия", "Майя", "Александра", "Елизавета", "Вероника", "Милана", "Ульяна", "Мария", "Камилла", "Арина", "Элина", "Есения", };
    //    return names[new Random().Next(names.Count)];
    //}
    

    //private string GetRandomPatronymic()
    //{
    //    List<string> patronymics = [ "Данииловна", "Андреевна", "Никитична", "Михайловна", "Александровна", "Всеволодовна", "Эминовна", "Александровна", "Артёмовна", "Михайловна", "Демидовна", "Юрьевич", "Макаровна", "Матвеевна", "Матвеевна", "Фёдоровна", "Сергеевна", "Захарович", "Родионовна", "Александрович", "Ильич",
    //                    "Романович", "Макарович", "Микайловна", "Николаевна", "Олеговна", "Степанович", "Максимович", "Дмитриевна", "Евгеньевич", "Владиславовна", "Даниилович", "Иванович", "Алиевна", "Денисович", "Яновна", "Егорович", "Михайлович", "Фёдоровна", "Артёмовна", "Матвеевна", "Тимуровна", "Михаиловна", "Станиславовна", "Артёмович", "Серафимовна",
    //                    "Ярославович", "Викторовна", "Миронович", "Алиевна", "Юрьевна", "Георгиевич", "Иванович", "Андреевич", "Григорьевна", "Александровна", "Владиславовна", "Михайловна", "Робертович", "Дмитриевич", "Александро..." ];

    //    return patronymics[new Random().Next(patronymics.Count)];
    //}

    //private Worker GetRandomWorker()
    //{
    //    Worker worker = new Worker
    //    {
    //        WorkerId = random.Next(1, 1000)
    //    };
    //    return worker;
    //}

    //private int GetRandomPositionId()
    //{
    //    List<int> positionIds = new List<int> { 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 22, 22, 22, 23, 24 };
    //    return positionIds[new Random().Next(positionIds.Count)];
    //}

    //private int GetRandomRestaurantId()
    //{
    //    // Assuming restaurant IDs range from 1 to 100
    //    List<int> idRest = new List<int> { 97202, 97203, 97204, 97205, 97206, 97207, 97208, 97209, 97210, 97211, 97212, 97213, 97214, 97215, 97216, 97217, 97218, 97219, 97220, 97221, 97222, 97223, 97224, 97225, 97226, 97227, 97228, 97229, 97230, 97231, 97232, 97233, 97234, 97235, 97236, 97237, 97238, 97239, 97240, 97241, 97242, 97243, 97244, 97245, 97246, 97247, 97248, 97249, 97250, 97251, 97252, 97253, 97254, 97255, 97256, 97257, 97258, 97259, 97260, 97261, 97262, 97263 };

    //    return idRest[new Random().Next(idRest.Count)];
    //}
    //public void GenerateWorkShiftForEmployeeAllYear()
    //{
    //    Random rnd = new Random();

    //    var workerIds = dbContext.Workers.Select(w => w.WorkerId).ToList();

    //    foreach (int workerId in workerIds)
    //    {
    //        for (DateTime date = new DateTime(DateTime.Now.Year, 1, 1); date <= DateTime.Now; date = date.AddDays(1))
    //        {
    //            // DayOfWeek randomRestDay = (DayOfWeek)rnd.Next(1, 6); // Выбор случайного дня недели как выходного

    //            if (date.DayOfWeek != DayOfWeek.Sunday)
    //            {
    //                int hourStart = rnd.Next(8, 17);
    //                int minStart = rnd.Next(0, 60);
    //                int shiftDuration = rnd.Next(4, 12);
    //                int totalMinutes = hourStart * 60 + minStart + shiftDuration * 60;

    //                if (totalMinutes > 1330)
    //                {
    //                    shiftDuration = (1330 - (hourStart * 60 + minStart)) / 60;
    //                }

    //                int hourEnd = hourStart + shiftDuration;
    //                int minEnd = rnd.Next(0, 60);

    //                DateTime startShift = new DateTime(date.Year, date.Month, date.Day, hourStart, minStart, 0);
    //                DateTime endShift = new DateTime(date.Year, date.Month, date.Day, hourEnd, minEnd, 0);

    //                WorkShift newWorkShift = new WorkShift
    //                {
    //                    WorkerId = workerId,
    //                    StartShift = startShift,
    //                    EndShift = endShift,
    //                    DescriptionManualEntry = "Generated Shift"
    //                };

    //                dbContext.WorkShifts.Add(newWorkShift);
    //            }
    //        }
    //    }

    //    dbContext.SaveChanges();
    //}
